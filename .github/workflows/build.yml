name: Build and publish

on: [push, pull_request]

jobs:
  upload:
    name: Upload to PyPI
    if: github.repository == 'micro-manager/pymmcore'
    runs-on: ubuntu-latest
    needs: [sdist, wheels-manylinux, wheels-winmac]
    steps:
      - name: Download wheels and sdist
        uses: actions/download-artifact@v2

      - name: Collect wheels and sdist
        run: |
          mkdir dist
          mv pymmcore-sdist/* dist/
          mv pymmcore-wheels-manylinux/* dist/
          mv pymmcore-wheels-win-mac/* dist/
          ls dist

      - name: Upload to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        if: github.event_name == 'push'
        with:
          user: __token__
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository_url: https://test.pypi.org/legacy/
          skip_existing: true

      - name: Upload release to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}


  sdist:
    name: sdist
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Checkout submodules
        run: |
          git submodule sync --recursive
          git submodule update --init --force --recursive --depth=1

      - name: Install tools and dependencies
        run: |
          sudo apt-get install -y python3-dev python3-pip python3-venv
          python3 -m venv venv
          source venv/bin/activate
          pip install --upgrade pip build

      - name: Create source distribution
        run: |
          source venv/bin/activate
          python -m build --sdist --outdir dist/ .

      - uses: actions/upload-artifact@v1
        with:
          name: pymmcore-sdist
          path: dist


  wheels-manylinux:
    strategy:
      fail-fast: true
      matrix:
        manylinux-version: ['2014']
        arch: [i686, x86_64]
        boost-version: ['1_72_0']

    name: manylinux${{ matrix.manylinux-version }}_${{ matrix.arch }}

    runs-on: ubuntu-latest

    env:
      AUDITWHEEL_PLAT: manylinux${{ matrix.manylinux-version }}_${{ matrix.arch }}
      DOCKER_IMAGE: quay.io/pypa/manylinux${{ matrix.manylinux-version }}_${{ matrix.arch }}
      BOOST_VERSION: ${{ matrix.boost-version }}
      NUMPY_VERSIONS: cp36-cp36m 1.12.0 cp37-cp37m 1.14.5 cp38-cp38 1.17.3 cp39-cp39 1.19.3

    steps:
      - uses: actions/checkout@v2

      - name: Checkout submodules
        run: |
          git submodule sync --recursive
          git submodule update --init --force --recursive --depth=1

      - name: Pull image
        run: |
          docker pull $DOCKER_IMAGE

      - name: Build
        run: |
          docker run -e NUMPY_VERSIONS -e BOOST_VERSION -e AUDITWHEEL_PLAT -v $(pwd):/io $DOCKER_IMAGE /io/manylinux/build.sh

      - uses: actions/upload-artifact@v1
        with:
          name: pymmcore-wheels-manylinux
          path: wheelhouse


  wheels-winmac:
    strategy:
      fail-fast: true
      matrix:
        os: [Windows, macOS]
        python-version: ['3.6', '3.7', '3.8', '3.9']
        python-arch: [x64, x86]
        boost-version: ['1_72_0']
        macos-version: ['10.9']
        msvc-version: ['14.0'] # VS2015
        include:
          - os: Windows
            runner: windows-latest
          - os: macOS
            runner: macOS-latest
          - python-version: '3.6'
            mac-python-version: 3.6.8
            numpy-version: 1.12.0
          - python-version: '3.7'
            mac-python-version: 3.7.9
            numpy-version: 1.14.5
          - python-version: '3.8'
            mac-python-version: 3.8.8
            numpy-version: 1.17.3
          - python-version: '3.9'
            mac-python-version: 3.9.2
            numpy-version: 1.19.3
          - python-arch: x64
            msvc-arch: amd64
          - python-arch: x86
            msvc-arch: x86
        exclude:
          - os: macOS
            python-arch: x86

    name: ${{ matrix.os }} Python ${{ matrix.python-version }} ${{ matrix.python-arch }}

    runs-on: ${{ matrix.runner }}

    env:
      MACOSX_DEPLOYMENT_TARGET: ${{ matrix.macos-version }}
      VCVARSALL_DIR: C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build

    steps:
      - uses: actions/checkout@v2

      - name: Checkout submodules
        run: |
          git submodule sync --recursive
          git submodule update --init --force --recursive --depth=1

      - name: Install Python (generic)
        uses: actions/setup-python@v2
        if: matrix.os != 'macOS'
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.python-arch }}

      - name: Install Python (macOS)
        if: matrix.os == 'macOS'
        run: |
          # Install Python.org Python
          curl -LO https://www.python.org/ftp/python/${{ matrix.mac-python-version }}/python-${{ matrix.mac-python-version }}-macosx${{ matrix.macos-version }}.pkg
          sudo installer -pkg python-${{ matrix.mac-python-version }}-macosx${{ matrix.macos-version }}.pkg -target /
          /Library/Frameworks/Python.framework/Versions/${{ matrix.python-version }}/bin/python3 -m venv venv

      - name: Install tools (Windows)
        if: matrix.os == 'Windows'
        run: |
          choco install -y swig

      - name: Install tools (macOS)
        if: matrix.os == 'macOS'
        run: |
          brew install swig

      - name: Install dependencies (Windows)
        if: matrix.os == 'Windows'
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade setuptools wheel
          python -m pip install numpy==${{ matrix.numpy-version }}

      - name: Install dependencies (Unix)
        if: matrix.os != 'Windows'
        run: |
          source venv/bin/activate
          python -m pip install --upgrade pip
          python -m pip install --upgrade setuptools wheel
          python -m pip install numpy==${{ matrix.numpy-version }}

      - name: Get Boost source
        shell: bash
        run: |
          BOOST_VER=${{ matrix.boost-version }}
          BOOST_DOTS=${BOOST_VER//_/.}
          BOOST_TGZ=boost_$BOOST_VER.tar.gz
          # Try official source and an (arbitrary) SourceForge mirror
          curl -fLO https://boostorg.jfrog.io/artifactory/main/release/$BOOST_DOTS/source/$BOOST_TGZ || \
              curl -fLO https://iweb.dl.sourceforge.net/project/boost/boost/$BOOST_DOTS/$BOOST_TGZ
          PATH="$PATH:/usr/bin/core_perl"  # shasum in Windows Git Bash
          # Windows shasum fails if file list contains DOS newlines
          tr -d '\015' <boost-sha256.txt >boost-sha256.unix.txt
          shasum -a 256 -c boost-sha256.unix.txt
          tar xzf $BOOST_TGZ

      - name: Build Boost (Windows)
        if: matrix.os == 'Windows'
        shell: cmd
        run: |
          pushd "%VCVARSALL_DIR%"
          call vcvarsall.bat ${{ matrix.msvc-arch }} -vcvars_ver=${{ matrix.msvc-version }}
          popd
          cd boost_${{ matrix.boost-version }}
          call bootstrap.bat
          b2 --with-system --with-thread --with-date_time link=static runtime-link=shared toolset=msvc-${{ matrix.msvc-version }}

      - name: Build Boost (macOS)
        if: matrix.os == 'macOS'
        run: |
          cd boost_${{ matrix.boost-version }}
          ./bootstrap.sh
          ./b2 --with-system --with-thread --with-date_time link=static architecture=x86 address-model=64

      - name: Package and extract sources (Windows)
        if: matrix.os == 'Windows'
        run: |
          python setup.py sdist --format=zip
          mkdir tmp
          Expand-Archive -Path dist/pymmcore-*.zip -DestinationPath tmp
          mv tmp/pymmcore-* tmp/pymmcore

      - name: Package and extract sources (Unix)
        if: matrix.os == 'macOS'
        run: |
          source venv/bin/activate
          python setup.py sdist
          mkdir tmp
          tar xvzf dist/pymmcore-*.tar.gz -C tmp
          mv tmp/pymmcore-* tmp/pymmcore

      - name: Build wheel (Windows)
        if: matrix.os == 'Windows'
        shell: cmd
        env:
          BOOST_ROOT: ../../boost_${{ matrix.boost-version }}
          MSSdk: 1
          DISTUTILS_USE_SDK: 1
          PY_VCRUNTIME_REDIST: 1
        run: |
          pushd "%VCVARSALL_DIR%"
          call vcvarsall.bat ${{ matrix.msvc-arch }} -vcvars_ver=${{ matrix.msvc-version }}
          popd
          cd tmp\pymmcore
          python setup.py build_ext -I%BOOST_ROOT% -L%BOOST_ROOT%/stage/lib
          python setup.py build
          python setup.py bdist_wheel

      - name: Build wheel (macOS)
        if: matrix.os == 'macOS'
        env:
          BOOST_ROOT: ../../boost_${{ matrix.boost-version }}
          CC: clang
          CXX: clang++
          CFLAGS: -fvisibility=hidden -Wno-unused-variable
        run: |
          source venv/bin/activate
          cd tmp/pymmcore
          python setup.py build_ext -I$BOOST_ROOT -L$BOOST_ROOT/stage/lib -j2
          python setup.py build
          python setup.py bdist_wheel

      - name: Log undefined symbols (macOS)
        if: matrix.os == 'macOS'
        run: |
          cd tmp/pymmcore
          PYMOD=$(echo build/lib.*/pymmcore/_pymmcore_swig.*.so)

          echo "$PYMOD:"
          echo 'Weak symbols:'
          nm -mu $PYMOD |c++filt |grep ' weak ' # This is never empty
          echo '-- end of weak symbols --'

          echo 'Undefined symbols not containing Py:'
          nm -mu $PYMOD |c++filt |grep 'dynamically looked up' |grep -v _Py && exit 1
          echo '-- end of non-Py dynamically looked up symbols --'

      - name: Smoke test (Windows)
        if: matrix.os == 'Windows'
        run: |
          cd .. # Avoid picking up pymmcore.py from cwd
          python -m pip install (Get-Item pymmcore/tmp/pymmcore/dist/pymmcore-*.whl).FullName
          python pymmcore/smoketest/smoke.py

      - name: Smoke test (Unix)
        if: matrix.os != 'Windows'
        run: |
          source venv/bin/activate
          cd .. # Avoid picking up pymmcore.py from cwd
          python -m pip install pymmcore/tmp/pymmcore/dist/pymmcore-*.whl
          python pymmcore/smoketest/smoke.py

      - uses: actions/upload-artifact@v1
        with:
          name: pymmcore-wheels-win-mac
          path: tmp/pymmcore/dist
